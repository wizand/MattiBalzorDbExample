@page "/"
@using MattiDb;
@using MattiDb.Entities;
@using MattiExampleUi.Data;
@inject MattiDbService mattiDbService


<PageTitle>Index</PageTitle>

<h1>Mittaustulokset</h1>

@if (viewModels == null)
{
    <p>Ootellaas rauhassa</p>    

} else
{
    <table>
        <tr>
            <th>Id</th>
            <th>Nimi</th>
            <th>Arvo</th>
            <th>Insert Date</th>
            <th>Update Date</th>
        </tr>

        @foreach(var vm in viewModels)
        {
            <tr>
                <td>@vm.Id</td>
                <td><InputText @bind-Value="@vm.Nimi"></InputText></td>
                <td><InputNumber TValue="int" @bind-Value="@vm.Arvo"></InputNumber></td>
                <td>@vm.InsertDate</td>
                <td>@vm.UpdateDate</td>
                <td><Button class="btn btn-danger" @onclick="() => RemoveMittaustulos(vm)">Remove</Button></td>
                <td>
                    @if (vm.HasChanges)
                    {
                        <button class="btn btn-success" @onclick="() => UpdateMittaustulosToDb(vm)">Update</button>    
                    }
                </td>
            </tr>
        }

    </table>    

}


Nimi: <input type="text" @bind-value="@newViewModel.Nimi" />
<br />Arvo: <input type="text" @bind-value="@newViewModel.Arvo" />
<br /><button class="btn btn-warning" value="Save to database" @onclick="@SaveViewModel" >Save new mittaustulos</button>
@code 
{

    public MattiViewModel newViewModel = new();
    List<MattiViewModel> viewModels = null;
    protected override void OnInitialized()
    {
        UpdateViewModelTable();
        base.OnInitialized();
    }

    private void UpdateViewModelTable(bool force = false)
    {

        if (viewModels == null || force)
        {
            var listaMittaustuloksista = mattiDbService.GetAllMittaustulos();
            viewModels = new();
            foreach (Mittaustulos mt in listaMittaustuloksista)
            {
                viewModels.Add(new MattiViewModel(mt));            }
        }

    }


    public void SaveViewModel()
    {
        mattiDbService.SaveMittaustulos(newViewModel.MittaustulosModel);
        newViewModel = new();

        UpdateViewModelTable(true);
    }

    public void RemoveMittaustulos(MattiViewModel vm)
    {
        mattiDbService.RemoveMittaustulos(vm.MittaustulosModel);
        UpdateViewModelTable(true);
    }

    public void UpdateMittaustulosToDb(MattiViewModel vm)
    {
        mattiDbService.UpdateMittaustulos(vm.MittaustulosModel);
        vm.HasChanges = false;
        UpdateViewModelTable();
    }
}